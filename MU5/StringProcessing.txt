Oct/Hex  Hex   Order
01C121   0E51  Org NBld V32 Z 0
         0000
 3133    62C3  STS D_LD V64 NB 3

STS XD_LD V64 NB 0
Loads the XDR register with the descriptor held in VA 16; the origin of this descriptor points to the first source string which contains just one element, ¨. 
STS SMVB lit Z 32
SMVB moves (strictly speaking, copies) one byte from the source string to the destination string. The Origin fields of DR and XDR are each incremented by 1 and the Length fields are decremented by one. The destination string initially contains 16 bytes, held as two sequential words in the Local Store, each containing the string '-------'. At the end of the SMVB instruction the first word, i.e. the word currently in FRc, contains '¨-------'. 
STS XD_LD V64 NB 1
Loads the XDR register with the descriptor held in VA 17; the origin of this descriptor points to the second source string; this contains the word hello. 
STS SMVE lit Z 32
SMVE moves (i.e. copies) the source string to the destination string using an alternating sequence of load cycles and store cycles; at the end the first word of the destination string contains '¨hello--'. 
STS BMVB lit Z 32
During its first cycle, BMVB load the operand (32, the ASCII decimal value of the 'space' character) into the MASK_BYTE register and then moves one copy of BYTE to the destination string; the first word of the destination string now contains '¨hello -'. 
STS XD_LD V64 NB 2
Loads the XDR register with the descriptor held in VA 18; the origin of this descriptor points to the third source string; this contains the word world. 
STS SMVE lit Z 34
At the end of this SMVE instruction the first destination word contains '¨hello w' while the second, the word currently shown in FRc, contains 'orld----'. 
STS XD_LD V64 NB 0
Re-loads the XDR register with the descriptor of the first source string. 
STS SMVF lit Z 32
This SMVF (String MoVe and Fill) instruction moves the single byte (¨) in the source string to the destination string. The destination string is not yet full, however, so at the end of the first store cycle, instead of a second load cycle, further store cycles are sent through OBS to Dop with the function field changed to BMVB. This causes the remainder of the 16-byte destination string to be filled with copies of BYTE, in this case with spaces. 
STS D_LD V64 NB 3
Re-loads the descriptor that points to the start of the destination string. 
STS BSCN lit Z 104
Scans the destination string looking for ASCII character 104 (h); the order terminates when if finds the 'h' in 'hello'. 
STS BMVB lit Z 72
Moves (replaces) the 'h' in hello with 'H'. 
STS D_LD V64 NB 4
Loads the descriptor held in VA20; this descriptor points to a string of digits '00083576' held in Block 3 of the Local Store. 
STS BCMP lit Z 48
This Byte Compare instruction tests each character in turn for equality with ASCII character 48 (i.e. 0); it terminates when it finds the first non-zero digit, i.e. 8 and leaves the descriptor in DR pointing to this digit. 
B LD S0 D 0
Loads the character to which DR is now pointing into the B register; on completion, the value in B is the ASCII decimal code for '8', i.e. 56. 
B LD lit Z 0
Resets B to 0. 
STS XD_LD V64 NB 5
Loads XDR with the descriptor in VA21; this descriptor points to the start of the string 'Let_there_be_light.' 
STS D_LD V64 NB 6
Loads DR with the descriptor in VA22; this descriptor points to the start of the string 'light.' 
STS SCMP lit Z 46
Following the first cycle, the String Compare instruction is executed as a sequence of load cycles and compare cycles in which it compares corresponding bytes of the source and destination strings; it terminates when they differ or when it reaches the end of the destination string; if it reaches the end of the source string before finding an inequality, it uses BYTE as further source bytes. In this case BYTE is the full stop character, so that if the word being sought is at the end of the sentence, as it is here, it will actually be found. 
Org BReq lit Z 6
If/when the SCMP instruction finds equality (i.e. the test bits T1 and T2 are set to =0), this instruction causes a branch to the ACC STOP instruction. 
STS BSCN lit Z 95
Scans the destination string looking for the _ character i.e. the SCMP instruction terminated before the end of the current word was reached, so the descriptor now needs to be moved forward to the start of the next word. This BSCN order leaves DR pointing to the (underscore) separator, so the next instruction: 
STS MOD lit Z 1
moves DR forwards by 1 to point to the start of the next word. 
STS XD_LD V64 NB 5
Re-loads XDR to point to the start of 'light'. 
B ADD lit Z 1
Increments the B register, so that when the loop terminates, B indicates which word in the destination string is the one being sought. 
Org BR lit Z -6
Branches back to the SCMP order at the start of the loop. 
ACC STOP lit Z 0
Stops the simulation but, before it reaches the accumulator, causes the contents of those Name Store words and OBS buffers that have been updated to be written back to Local Store. 
